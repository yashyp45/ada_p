Enter the number of items: 5
Enter the knapsack capacity: 7
Enter the weights of the items separated by space: 2 2 3 4 5
Enter the values of the items separated by space: 3 4 5 8 10
Maximum value: 14
Selected items: [0, 1, 0, 0, 1]



def knapsack_01(weights, values, capacity):
    n = len(weights)
    dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]

    for i in range(1, n + 1):
        for w in range(1, capacity + 1):
            if i == 0 or w == 0:
                dp[i][w] = 0
            elif weights[i - 1] <= w:
                # Consider including the current item
                dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w])
            else:
                # Exclude the current item
                dp[i][w] = dp[i - 1][w]

    # Reconstructing the solution
    # Backtrack to find the selected items
    selected_items = []
    total_value = dp[n][capacity]
    remaining_capacity = capacity

    for i in range(n, 0, -1):
        if total_value <= 0:
            break
        if total_value == dp[i - 1][remaining_capacity]:
            continue
        else:
            selected_items.append(i - 1)
            total_value -= values[i - 1]
            remaining_capacity -= weights[i - 1]

    selected_items.reverse()
    return dp[n][capacity], selected_items

# Take manual input for weights, values, and capacity
n = int(input("Enter the number of items: "))
weights = list(map(int, input("Enter the weights of the items separated by space: ").split()))
values = list(map(int, input("Enter the values of the items separated by space: ").split()))
capacity = int(input("Enter the knapsack capacity: "))

max_value, selected_items = knapsack_01(weights, values, capacity)
print("Maximum value:", max_value)
print("Selected items:", selected_items)
