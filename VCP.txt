from collections import defaultdict

class Graph:

	def __init__(self, vertices):
		self.V = vertices
		self.graph = defaultdict(list)

	# Function to add an edge to graph
	def addEdge(self, u, v):
		self.graph[u].append(v)

	# The function to print vertex cover
	def printVertexCover(self):

		# Initialize all vertices as not visited.
		visited = [False] * (self.V)

		# Consider all edges one by one
		for u in range(self.V):
			if not visited[u]:
				for v in self.graph[u]:
					if not visited[v]:

						# Add the vertices (u, v) to the result set. We make the vertex
						# u and v visited so that all edges from/to them would  be ignored
						visited[v] = True
						visited[u] = True
						break

		# Print the vertex cover
		for j in range(self.V):
			if visited[j]:
				print(j, end = ' ')

# Driver code
g = Graph(7)
g.addEdge(1, 2)
g.addEdge(1, 4)
g.addEdge(2, 3)
g.addEdge(2, 5)
g.addEdge(3, 6)
g.addEdge(5, 6)
g.addEdge(3, 7)

print('The vertex cover of the given graph is : ')
g.printVertexCover()




























# Vertex Cover
from collections import defaultdict

class Graph:

	def __init__(self, vertices):

		self.V = vertices

		self.graph = defaultdict(list)

	def addEdge(self, u, v):
		self.graph[u].append(v)

	def printVertexCover(self):

		visited = [False] * (self.V)
		print("Vertex Cover: ")
		for u in range(self.V):

			# An edge is only picked when
			# both visited[u] and visited[v]
			# are false
			if not visited[u]:

				# Go through all adjacents of u and
				# pick the first not yet visited vertex
				for v in self.graph[u]:
					if not visited[v]:

						# Add the vertices (u, v) to the
						# result set. We make the vertex
						# u and v visited so that all
						# edges from/to them would
						# be ignored
						visited[v] = True
						visited[u] = True
						break

		# Print the vertex cover
		for j in range(self.V):
			if visited[j]:
				print(j, end = ' ')

		print()

g = Graph(7)
g.addEdge(0, 1)
g.addEdge(0, 2)
g.addEdge(1, 3)
g.addEdge(3, 4)
g.addEdge(4, 5)
g.addEdge(5, 6)

g.printVertexCover()