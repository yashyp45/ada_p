character   Frequency
    a            5
    b           9
    c           12
    d           13
    e           16
    f           45


character   code-word
    f          0
    c          100
    d          101
    a          1100
    b          1101
    e          111


import heapq

class Node:
    def __init__(self, freq, symbol, left=None, right=None):
        self.freq = freq
        self.symbol = symbol
        self.left = left
        self.right = right
        self.huff = ''

    def __lt__(self, next):
        return self.freq < next.freq

def print_tree(node, val=''):
    newVal = val + str(node.huff)

    if node.left:
        print_tree(node.left, newVal)
    if node.right:
        print_tree(node.right, newVal)

    if not node.left and not node.right:
        print(f"{node.symbol} -> {newVal}")

def build_huffman_tree(chars, freq):
    nodes = []

    for i in range(len(chars)):
        heapq.heappush(nodes, Node(freq[i], chars[i]))

    while len(nodes) > 1:
        left = heapq.heappop(nodes)
        right = heapq.heappop(nodes)

        left.huff = 0
        right.huff = 1

        new_node = Node(left.freq + right.freq, left.symbol + right.symbol, left, right)

        heapq.heappush(nodes, new_node)

    return nodes[0]

num_chars = int(input("Enter the number of characters: "))
chars = []
freq = []

for i in range(num_chars):
    char = input(f"Enter character {i + 1}: ")
    chars.append(char)
    frequency = int(input(f"Enter frequency for {char}: "))
    freq.append(frequency)

huffman_tree = build_huffman_tree(chars, freq)

print("\nHuffman code for each character:")
print_tree(huffman_tree)
